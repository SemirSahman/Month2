package ba.bitcamp.week12.day01.predavanja.search;

import java.io.File;
import java.io.FileFilter;
import java.util.LinkedList;
import java.util.Queue;

public class Search {

	private String fileName;
	private String extension;
	private String searchTerm;

	private Queue<File> files;

	public Search(String searchString) throws IllegalArgumentException {
		String[] parts = searchString.split(" ");
		if (parts.length < 2) {
			throw new IllegalArgumentException("Invalid search format");
		}
		searchTerm = parts[0];

		String[] fileInfo = parts[1].split("\\.");
		if (fileInfo.length < 2) {
			throw new IllegalArgumentException("Invalid search format");
		}

		fileName = fileInfo[0];
		extension = fileInfo[1];

		if (fileName.equals("*"))
			fileName = "";

		if (extension.equals("*"))
			extension = "";

		files = new LinkedList<File>();

	}

	public void startSearch() {

		File root = new File(".");
		// root.li
	}

	private class Filter implements FileFilter {

		@Override
		public boolean accept(File pathname) {
			if (pathname.isDirectory())
				return true;

			if (fileName.isEmpty() && extension.isEmpty())
				return true;

			String file = fileName + "." + extension;
			if (!extension.isEmpty()) {
				if (pathname.getAbsolutePath().endsWith(file))
					return true;

			}else{
				if(fileName.isEmpty())
					return true;
				else
					return pathname.getName().contains(file);
			}

			return false;
		}

	}

}
