package ba.bitcamp.chatProject4;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Server implements Runnable {

	private int serverPort = 1946;
	private ServerSocket serverSocket = null;
	private boolean isStopped = false;
	private Thread runningThread = null;
	private Object lock;

	public Server(int port) {
		this.serverPort = port;
	}

	@Override
	public void run(){
        synchronized(this){
            this.runningThread = Thread.currentThread();
        }
        openServerSocket();
        while(! isStopped()){
            Socket clientSocket = null;
            try {
                clientSocket = this.serverSocket.accept();
            } catch (IOException e) {
                if(isStopped()) {
                    System.out.println("Server Stopped.") ;
                    return;
                }
                throw new RuntimeException(
                    "Error accepting client connection", e);
            }
            new Thread(
                new WorkerRunnable(
                    clientSocket, "Multithreaded Server")
            ).start();
        }
        System.out.println("Server Stopped.") ;
    }
	
	private synchronized boolean isStopped(){
		return this.isStopped;
	}
	
	private synchronized void stop(){
		this.isStopped = true;
		try{
			this.serverSocket.close();
		}catch (IOException e){
			throw new RuntimeException("Error closing server", e);
		}
	}
	
	private void openServerSocket(){
		try {
			this.serverSocket = new ServerSocket(this.serverPort);
		} catch (IOException e) {
			System.out.println("Cannot open port: " + serverPort);
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
}
